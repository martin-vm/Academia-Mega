@page "/"
@using TaskManagerClient.Services;
@using TaskManagerClient.Models;

@inject ITaskReader TaskReader
@inject ITaskWriter TaskWriter

<h2>Tareas</h2>
@if (tasks is null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <ul class="list-group">
        @foreach (var t in tasks)
        {
            <li class="list-group-item">
                <div class="d-flex align-items-center gap-2">
                    <input type="checkbox" class="form-check-input" @bind="t.IsDone" />

                    <input type="text" class="form-control form-control-sm w-25" placeholder="Título" @bind="t.Title" />

                    <input type="text" class="form-control form-control-sm w-50" placeholder="Descripción" @bind="t.Description" />

                    <button class="btn btn-primary btn-sm" @onclick="@(() => Update(t))">Actualizar</button>

                    <button class="btn btn-danger btn-sm" @onclick="@(() => Delete(t.id))">Eliminar</button>
                </div>
            </li>
        }
    </ul>
    <br>
    <TaskForm OnSaved="Refresh"/>
}

@code
{
    List<TaskItem>? tasks;
    
    protected override async Task OnInitializedAsync() => await Refresh();

    async Task Refresh()
    {
        tasks = (await TaskReader.GetAllAsync()).ToList();
    }
    async Task Delete(Guid id)
    {
        await TaskWriter.DeleteAsync(id);
        await Refresh();
    }

    async Task Update(TaskItem task)
    {
        await TaskWriter.UpdateAsync(task);
        await Refresh();
    }
}